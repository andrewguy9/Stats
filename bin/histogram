#!/usr/bin/env python
# Consumes a stream of bucket, value pairs and produces a histogram.

import argparse

parser = argparse.ArgumentParser(description = 'Prints a histogram in the terminal')
parser.add_argument('--symbols', dest='symbols', type=str, default='*+#@', help='Symbols to use when graphing lines')
parser.add_argument('--max', dest='max_value', type=float, help='Upper bound on the histogram.')
parser.add_argument('--width', dest='width', type=int, required=True, help='Width of the screen')
parser.add_argument('files', nargs='*', default=['/dev/stdin'], help='list of files to read. If no files are specified, reads from stdin')

def print_line(row, symbols, bucket_width, max_value, width):
    bucket = row[0]
    fields = row[1:]
    normalized = map(lambda x: int(min(max_value, width * (float(x) / max_value))), fields)
    field_symbols = zip(normalized, symbols)
    ordered = sorted(field_symbols)
    index = 0
    result = ""
    for (field, symbol) in ordered:
        padding = field - index - 1
        if padding > 0:
            result += " "*padding + symbol
            index += padding + 1
        elif padding == 0:
            result += symbol
            index += 1
    print bucket, result

def get_ranges(rows):
    max_bucket = rows[0][0]
    max_field = rows[0][1]
    for row in rows:
        max_bucket = max(max_bucket, row[0])
        max_field = max(max_field, max(row[1:]))
    return (max_bucket, max_field)
        
def ingest_line(line):
    tokens = line.split()
    bucket = tokens[0]
    fields = tokens[1:]
    fields = map(lambda x: float(x), fields)
    return (bucket, fields)

def main():
    args = parser.parse_args()
    rows = []
    for path in args.files:
        with open(path, 'r') as f:
            for line in f.readlines():
                rows.append(ingest_line(line))
    (max_bucket, max_field) = get_ranges(rows)
    if args.max_value is not None:
        max_field = args.max_value
    for row in rows:
        print_line(row, args.symbols, max_bucket, max_field, args.width)

if __name__ == "__main__":
    main()
